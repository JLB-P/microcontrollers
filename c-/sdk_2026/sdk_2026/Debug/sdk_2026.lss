
sdk_2026.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a3  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a90  00000000  00000000  00001677  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5d  00000000  00000000  00002107  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b3  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000703  00000000  00000000  0000340f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003b12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  9e:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:
#include "leds.h"
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(ANALOG_COMP_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	led_on_off_fast();
  c8:	0e 94 42 01 	call	0x284	; 0x284 <led_on_off_fast>
}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <init_comp>:


void init_comp(void)
{
	ACSR |= (1 << ACIS0 | 1 << ACIS1); //interrupt when Input > Vref
  ee:	80 b7       	in	r24, 0x30	; 48
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	80 bf       	out	0x30, r24	; 48
	ACSR |= (1 << ACIE); //enable intarrupt
  f4:	80 b7       	in	r24, 0x30	; 48
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 bf       	out	0x30, r24	; 48
  fa:	08 95       	ret

000000fc <__vector_1>:
 */
#include <avr/interrupt.h>
#include "leds.h"

ISR(INT0_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
		led_on_off_fast();
 11e:	0e 94 42 01 	call	0x284	; 0x284 <led_on_off_fast>
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <init_int0>:

void init_int0(void)
{
	EICRA |= (1 << ISC00); //interruption on any logical change
 144:	e9 e6       	ldi	r30, 0x69	; 105
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 14e:	8d b3       	in	r24, 0x1d	; 29
 150:	81 60       	ori	r24, 0x01	; 1
 152:	8d bb       	out	0x1d, r24	; 29
 154:	08 95       	ret

00000156 <lcd_reset>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	85 b9       	out	0x05, r24	; 5
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	89 ef       	ldi	r24, 0xF9	; 249
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <lcd_reset+0xa>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_reset+0x14>
 16a:	00 00       	nop
 16c:	94 e3       	ldi	r25, 0x34	; 52
 16e:	95 b9       	out	0x05, r25	; 5
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	85 b9       	out	0x05, r24	; 5
 174:	ef e3       	ldi	r30, 0x3F	; 63
 176:	fc e9       	ldi	r31, 0x9C	; 156
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_reset+0x22>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_reset+0x28>
 17e:	00 00       	nop
 180:	95 b9       	out	0x05, r25	; 5
 182:	85 b9       	out	0x05, r24	; 5
 184:	ef e9       	ldi	r30, 0x9F	; 159
 186:	ff e0       	ldi	r31, 0x0F	; 15
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_reset+0x32>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_reset+0x38>
 18e:	00 00       	nop
 190:	95 b9       	out	0x05, r25	; 5
 192:	85 b9       	out	0x05, r24	; 5
 194:	8f e9       	ldi	r24, 0x9F	; 159
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_reset+0x42>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_reset+0x48>
 19e:	00 00       	nop
 1a0:	84 e2       	ldi	r24, 0x24	; 36
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	85 b9       	out	0x05, r24	; 5
 1a8:	ef e9       	ldi	r30, 0x9F	; 159
 1aa:	ff e0       	ldi	r31, 0x0F	; 15
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_reset+0x56>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_reset+0x5c>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <lcd_cmd>:
 1b6:	98 2f       	mov	r25, r24
 1b8:	90 7f       	andi	r25, 0xF0	; 240
 1ba:	29 2f       	mov	r18, r25
 1bc:	24 60       	ori	r18, 0x04	; 4
 1be:	25 b9       	out	0x05, r18	; 5
 1c0:	95 b9       	out	0x05, r25	; 5
 1c2:	20 e1       	ldi	r18, 0x10	; 16
 1c4:	82 9f       	mul	r24, r18
 1c6:	c0 01       	movw	r24, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	98 2f       	mov	r25, r24
 1cc:	94 60       	ori	r25, 0x04	; 4
 1ce:	95 b9       	out	0x05, r25	; 5
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	9f e1       	ldi	r25, 0x1F	; 31
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_cmd+0x20>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_cmd+0x26>
 1dc:	00 00       	nop
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9f e1       	ldi	r25, 0x1F	; 31
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_cmd+0x2c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_cmd+0x32>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <lcd_init>:
 1ec:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_reset>
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_cmd>
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_cmd>
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_cmd>
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_cmd>
 208:	08 95       	ret

0000020a <lcd_data>:
 20a:	98 2f       	mov	r25, r24
 20c:	90 7f       	andi	r25, 0xF0	; 240
 20e:	29 2f       	mov	r18, r25
 210:	25 60       	ori	r18, 0x05	; 5
 212:	25 b9       	out	0x05, r18	; 5
 214:	91 60       	ori	r25, 0x01	; 1
 216:	95 b9       	out	0x05, r25	; 5
 218:	20 e1       	ldi	r18, 0x10	; 16
 21a:	82 9f       	mul	r24, r18
 21c:	c0 01       	movw	r24, r0
 21e:	11 24       	eor	r1, r1
 220:	98 2f       	mov	r25, r24
 222:	95 60       	ori	r25, 0x05	; 5
 224:	95 b9       	out	0x05, r25	; 5
 226:	81 60       	ori	r24, 0x01	; 1
 228:	85 b9       	out	0x05, r24	; 5
 22a:	8f e3       	ldi	r24, 0x3F	; 63
 22c:	9f e1       	ldi	r25, 0x1F	; 31
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_data+0x24>
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcd_data+0x2a>
 234:	00 00       	nop
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9f e1       	ldi	r25, 0x1F	; 31
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_data+0x30>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_data+0x36>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <lcd_col_row>:
 244:	e6 2f       	mov	r30, r22
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	e1 50       	subi	r30, 0x01	; 1
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	90 81       	ld	r25, Z
 24e:	89 0f       	add	r24, r25
 250:	81 58       	subi	r24, 0x81	; 129
 252:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_cmd>
 256:	08 95       	ret

00000258 <lcd_write_string>:
	_delay_ms(2);
}


void lcd_write_string(char *a)
{
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	03 c0       	rjmp	.+6      	; 0x26e <lcd_write_string+0x16>
	lcd_data(a[i]);
 268:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>


void lcd_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	f8 01       	movw	r30, r16
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	80 81       	ld	r24, Z
 276:	81 11       	cpse	r24, r1
 278:	f7 cf       	rjmp	.-18     	; 0x268 <lcd_write_string+0x10>
	lcd_data(a[i]);
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <led_on_off_fast>:
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <led_on_off_fast+0x24>
	{
		PORTB ^= 1 << PB5;
 28a:	95 b1       	in	r25, 0x05	; 5
 28c:	80 e2       	ldi	r24, 0x20	; 32
 28e:	89 27       	eor	r24, r25
 290:	85 b9       	out	0x05, r24	; 5
 292:	4f ef       	ldi	r20, 0xFF	; 255
 294:	81 ee       	ldi	r24, 0xE1	; 225
 296:	94 e0       	ldi	r25, 0x04	; 4
 298:	41 50       	subi	r20, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <led_on_off_fast+0x14>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <led_on_off_fast+0x1e>
 2a2:	00 00       	nop
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
 2a4:	2f 5f       	subi	r18, 0xFF	; 255
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	24 31       	cpi	r18, 0x14	; 20
 2aa:	31 05       	cpc	r19, r1
 2ac:	74 f3       	brlt	.-36     	; 0x28a <led_on_off_fast+0x6>
	{
		PORTB ^= 1 << PB5;
		_delay_ms(100);	
	}
	
 2ae:	08 95       	ret

000002b0 <main>:
#include "lcd_4b.h"

int main(void)
{
    /* Replace with your application code */
    init_ports();
 2b0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <init_ports>
	init_int0();
 2b4:	0e 94 a2 00 	call	0x144	; 0x144 <init_int0>
	//timer0_overflow_interrupt();
	//timer1_CTCmode_interrupt();
	//timer1_CTCmode_nonPWM();
	//timer1_fastPWM_inverting();
	//Timer2_PhaseCorrectPWMMode_Inverting();
	init_comp();
 2b8:	0e 94 77 00 	call	0xee	; 0xee <init_comp>
	lcd_init();
 2bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
	lcd_col_row(5,1);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	0e 94 22 01 	call	0x244	; 0x244 <lcd_col_row>
	lcd_write_string("reprobados");
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_write_string>
	sei();
 2d0:	78 94       	sei
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <main+0x22>

000002d4 <init_ports>:
	//DDRB |= 1 << PB1;
	//configura PB3 como salida para OC2A
	//DDRB |= 1 << PB3;
	
	//configura PD2 como entrada
	DDRD &= ~(1 << PD2);
 2d4:	8a b1       	in	r24, 0x0a	; 10
 2d6:	8b 7f       	andi	r24, 0xFB	; 251
 2d8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2);//activa Rp
 2da:	8b b1       	in	r24, 0x0b	; 11
 2dc:	84 60       	ori	r24, 0x04	; 4
 2de:	8b b9       	out	0x0b, r24	; 11
	//uso temporal del puerto B para LCD
	DDRB = 0xff; //PB4 a PB7 para datos
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	84 b9       	out	0x04, r24	; 4
 2e4:	08 95       	ret

000002e6 <__vector_16>:
	while (1)
	{
		if (TCNT1 >= 31999)	
		{
				PORTB ^= 1<<PB5; //PB5 --> output
				TCNT1 = 0;
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 2fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 302:	8d 37       	cpi	r24, 0x7D	; 125
 304:	30 f0       	brcs	.+12     	; 0x312 <__vector_16+0x2c>
 306:	95 b1       	in	r25, 0x05	; 5
 308:	80 e2       	ldi	r24, 0x20	; 32
 30a:	89 27       	eor	r24, r25
 30c:	85 b9       	out	0x05, r24	; 5
 30e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_11>:
		}
	}
}
//start Interrupt Service Routine
ISR(TIMER1_COMPA_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
	PORTB ^= 1<<PB5; //PB5 --> output
 32e:	95 b1       	in	r25, 0x05	; 5
 330:	80 e2       	ldi	r24, 0x20	; 32
 332:	89 27       	eor	r24, r25
 334:	85 b9       	out	0x05, r24	; 5
}
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
