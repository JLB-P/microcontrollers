
sdk_2026.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af1  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000710  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000251  00000000  00000000  00002549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000279a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  88:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
 */
#include <avr/interrupt.h>
#include "leds.h"

ISR(INT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
		led_on_off_fast();
  b2:	0e 94 75 00 	call	0xea	; 0xea <led_on_off_fast>
}
  b6:	ff 91       	pop	r31
  b8:	ef 91       	pop	r30
  ba:	bf 91       	pop	r27
  bc:	af 91       	pop	r26
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	7f 91       	pop	r23
  c4:	6f 91       	pop	r22
  c6:	5f 91       	pop	r21
  c8:	4f 91       	pop	r20
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <init_int0>:

void init_int0(void)
{
	EICRA |= (1 << ISC00); //interruption on any logical change
  d8:	e9 e6       	ldi	r30, 0x69	; 105
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
  e2:	8d b3       	in	r24, 0x1d	; 29
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	8d bb       	out	0x1d, r24	; 29
  e8:	08 95       	ret

000000ea <led_on_off_fast>:
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	0f c0       	rjmp	.+30     	; 0x10e <led_on_off_fast+0x24>
	{
		PORTB ^= 1 << PB5;
  f0:	95 b1       	in	r25, 0x05	; 5
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	89 27       	eor	r24, r25
  f6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	4f ef       	ldi	r20, 0xFF	; 255
  fa:	81 ee       	ldi	r24, 0xE1	; 225
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	41 50       	subi	r20, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <led_on_off_fast+0x14>
 106:	00 c0       	rjmp	.+0      	; 0x108 <led_on_off_fast+0x1e>
 108:	00 00       	nop
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	24 31       	cpi	r18, 0x14	; 20
 110:	31 05       	cpc	r19, r1
 112:	74 f3       	brlt	.-36     	; 0xf0 <led_on_off_fast+0x6>
	{
		PORTB ^= 1 << PB5;
		_delay_ms(100);	
	}
	
 114:	08 95       	ret

00000116 <main>:
#include "timers.h"

int main(void)
{
    /* Replace with your application code */
    init_ports();
 116:	0e 94 93 00 	call	0x126	; 0x126 <init_ports>
	init_int0();
 11a:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_int0>
	//timer0_normalmode_noprescaler();
	//timer0_overflow_interrupt();
	timer1_CTCmode_interrupt();
 11e:	0e 94 cc 00 	call	0x198	; 0x198 <timer1_CTCmode_interrupt>
	sei();
 122:	78 94       	sei
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0xe>

00000126 <init_ports>:
 */
#include <avr/io.h>
void init_ports(void)
{
	//configura PB5 como salida
	DDRB |= 1 << PB5;
 126:	84 b1       	in	r24, 0x04	; 4
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	84 b9       	out	0x04, r24	; 4
	//configura PD2 como entrada
	DDRD &= ~(1 << PD2);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2);//activa Rp
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	84 60       	ori	r24, 0x04	; 4
 136:	8b b9       	out	0x0b, r24	; 11
 138:	08 95       	ret

0000013a <__vector_16>:
	while (1)
	{
		if (TCNT1 >= 31999)	
		{
				PORTB ^= 1<<PB5; //PB5 --> output
				TCNT1 = 0;
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	8d 37       	cpi	r24, 0x7D	; 125
 158:	30 f0       	brcs	.+12     	; 0x166 <__vector_16+0x2c>
 15a:	95 b1       	in	r25, 0x05	; 5
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	89 27       	eor	r24, r25
 160:	85 b9       	out	0x05, r24	; 5
 162:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_11>:
		}
	}
}
//start Interrupt Service Routine
ISR(TIMER1_COMPA_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
	PORTB ^= 1<<PB5; //PB5 --> output
 182:	95 b1       	in	r25, 0x05	; 5
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	89 27       	eor	r24, r25
 188:	85 b9       	out	0x05, r24	; 5
}
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <timer1_CTCmode_interrupt>:
void timer1_CTCmode_interrupt(void)
{
	//configure timer
	TCCR1B |= 1<<WGM12; // timer1 in CTC mode (pag.141,table 16.4)
 198:	e1 e8       	ldi	r30, 0x81	; 129
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	80 83       	st	Z, r24
	(16,000,000)/(2000x65,536) = 0.122125 (~1)
	OCR1A = (fosc/(2xNxfocr))-1								
	OCR1A = (16,000,000/2x(1)x(1000))-1 = 7999										
	with this value pulse witdth = 0.5 ms												
	*/
	OCR1A |= 7999;
 1a2:	a8 e8       	ldi	r26, 0x88	; 136
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	8d 91       	ld	r24, X+
 1a8:	9c 91       	ld	r25, X
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	8f 63       	ori	r24, 0x3F	; 63
 1ae:	9f 61       	ori	r25, 0x1F	; 31
 1b0:	11 96       	adiw	r26, 0x01	; 1
 1b2:	9c 93       	st	X, r25
 1b4:	8e 93       	st	-X, r24
	TCCR1B |= 1<<CS10;		//set prescaler = 1 	
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
	TCNT1 = 0;				//Set counting to 0
 1bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 |= 1<<OCIE1A;	//Enable interrupts on compare
 1c4:	ef e6       	ldi	r30, 0x6F	; 111
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
