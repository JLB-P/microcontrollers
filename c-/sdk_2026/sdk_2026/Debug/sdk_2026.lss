
sdk_2026.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a2  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bab  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cfb  00000000  00000000  000025d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  000032d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000625  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  00003ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  9e:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:
#include "leds.h"
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(ANALOG_COMP_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	led_on_off_fast();
  c8:	0e 94 05 01 	call	0x20a	; 0x20a <led_on_off_fast>
}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_1>:
 */
#include <avr/interrupt.h>
#include "leds.h"

ISR(INT0_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
		led_on_off_fast();
 110:	0e 94 05 01 	call	0x20a	; 0x20a <led_on_off_fast>
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <init_int0>:

void init_int0(void)
{
	EICRA |= (1 << ISC00); //interruption on any logical change
 136:	e9 e6       	ldi	r30, 0x69	; 105
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 140:	8d b3       	in	r24, 0x1d	; 29
 142:	81 60       	ori	r24, 0x01	; 1
 144:	8d bb       	out	0x1d, r24	; 29
 146:	08 95       	ret

00000148 <start>:
	TWCR = (1<<TWEN); //Activa la interfaz TWI
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Genera condición de START
 148:	84 ea       	ldi	r24, 0xA4	; 164
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 14e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 152:	88 23       	and	r24, r24
 154:	e4 f7       	brge	.-8      	; 0x14e <start+0x6>
}
 156:	08 95       	ret

00000158 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Genera condición de STOP
 158:	84 e9       	ldi	r24, 0x94	; 148
 15a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <stop+0xa>
 166:	00 c0       	rjmp	.+0      	; 0x168 <stop+0x10>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte a escribir
 16c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Escritura con reconocimiento (TWEA=1)
 170:	84 ec       	ldi	r24, 0xC4	; 196
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 176:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17a:	88 23       	and	r24, r24
 17c:	e4 f7       	brge	.-8      	; 0x176 <write_i2c+0xa>
}
 17e:	08 95       	ret

00000180 <lcd_i2c_data>:
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	c8 2f       	mov	r28, r24
 186:	0e 94 a4 00 	call	0x148	; 0x148 <start>
 18a:	80 e7       	ldi	r24, 0x70	; 112
 18c:	0e 94 b6 00 	call	0x16c	; 0x16c <write_i2c>
 190:	dc 2f       	mov	r29, r28
 192:	d0 7f       	andi	r29, 0xF0	; 240
 194:	8d 2f       	mov	r24, r29
 196:	8d 60       	ori	r24, 0x0D	; 13
 198:	0e 94 b6 00 	call	0x16c	; 0x16c <write_i2c>
 19c:	8d 2f       	mov	r24, r29
 19e:	89 60       	ori	r24, 0x09	; 9
 1a0:	0e 94 b6 00 	call	0x16c	; 0x16c <write_i2c>
 1a4:	80 e1       	ldi	r24, 0x10	; 16
 1a6:	c8 9f       	mul	r28, r24
 1a8:	e0 01       	movw	r28, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8c 2f       	mov	r24, r28
 1ae:	8d 60       	ori	r24, 0x0D	; 13
 1b0:	0e 94 b6 00 	call	0x16c	; 0x16c <write_i2c>
 1b4:	8c 2f       	mov	r24, r28
 1b6:	89 60       	ori	r24, 0x09	; 9
 1b8:	0e 94 b6 00 	call	0x16c	; 0x16c <write_i2c>
 1bc:	0e 94 ac 00 	call	0x158	; 0x158 <stop>
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9f e1       	ldi	r25, 0x1F	; 31
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_i2c_data+0x44>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_i2c_data+0x4a>
 1ca:	00 00       	nop
 1cc:	8f e3       	ldi	r24, 0x3F	; 63
 1ce:	9f e1       	ldi	r25, 0x1F	; 31
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_i2c_data+0x50>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_i2c_data+0x56>
 1d6:	00 00       	nop
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <lcd_i2c_write_string>:
	_delay_ms(2);
}

/*	Despliega una cadena de caracteres	*/
void lcd_i2c_write_string(char *a)
{
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 1ee:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_i2c_data>

/*	Despliega una cadena de caracteres	*/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	f8 01       	movw	r30, r16
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	80 81       	ld	r24, Z
 1fc:	81 11       	cpse	r24, r1
 1fe:	f7 cf       	rjmp	.-18     	; 0x1ee <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <led_on_off_fast>:
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	0f c0       	rjmp	.+30     	; 0x22e <led_on_off_fast+0x24>
	{
		PORTB ^= 1 << PB5;
 210:	95 b1       	in	r25, 0x05	; 5
 212:	80 e2       	ldi	r24, 0x20	; 32
 214:	89 27       	eor	r24, r25
 216:	85 b9       	out	0x05, r24	; 5
 218:	4f ef       	ldi	r20, 0xFF	; 255
 21a:	81 ee       	ldi	r24, 0xE1	; 225
 21c:	94 e0       	ldi	r25, 0x04	; 4
 21e:	41 50       	subi	r20, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <led_on_off_fast+0x14>
 226:	00 c0       	rjmp	.+0      	; 0x228 <led_on_off_fast+0x1e>
 228:	00 00       	nop
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
 22a:	2f 5f       	subi	r18, 0xFF	; 255
 22c:	3f 4f       	sbci	r19, 0xFF	; 255
 22e:	24 31       	cpi	r18, 0x14	; 20
 230:	31 05       	cpc	r19, r1
 232:	74 f3       	brlt	.-36     	; 0x210 <led_on_off_fast+0x6>
	{
		PORTB ^= 1 << PB5;
		_delay_ms(100);	
	}
	
 234:	08 95       	ret

00000236 <main>:
#include "lcd_i2c.h"

int main(void)
{
    /* Replace with your application code */
    init_ports();
 236:	0e 94 25 01 	call	0x24a	; 0x24a <init_ports>
	init_int0();
 23a:	0e 94 9b 00 	call	0x136	; 0x136 <init_int0>
	//timer1_CTCmode_interrupt();
	//timer1_CTCmode_nonPWM();
	//timer1_fastPWM_inverting();
	//Timer2_PhaseCorrectPWMMode_Inverting();
	//init_comp();
	lcd_i2c_write_string("aprobados");
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_i2c_write_string>
	
	sei();
 246:	78 94       	sei
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0x12>

0000024a <init_ports>:
	//DDRB |= 1 << PB1;
	//configura PB3 como salida para OC2A
	//DDRB |= 1 << PB3;
	
	//configura PD2 como entrada
	DDRD &= ~(1 << PD2);
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	8b 7f       	andi	r24, 0xFB	; 251
 24e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2);//activa Rp
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	84 60       	ori	r24, 0x04	; 4
 254:	8b b9       	out	0x0b, r24	; 11
	//uso temporal del puerto B para LCD
	DDRB = 0xff; //PB4 a PB7 para datos
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	84 b9       	out	0x04, r24	; 4
 25a:	08 95       	ret

0000025c <__vector_16>:
	while (1)
	{
		if (TCNT1 >= 31999)	
		{
				PORTB ^= 1<<PB5; //PB5 --> output
				TCNT1 = 0;
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 274:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 278:	8d 37       	cpi	r24, 0x7D	; 125
 27a:	30 f0       	brcs	.+12     	; 0x288 <__vector_16+0x2c>
 27c:	95 b1       	in	r25, 0x05	; 5
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	89 27       	eor	r24, r25
 282:	85 b9       	out	0x05, r24	; 5
 284:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_11>:
		}
	}
}
//start Interrupt Service Routine
ISR(TIMER1_COMPA_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
	PORTB ^= 1<<PB5; //PB5 --> output
 2a4:	95 b1       	in	r25, 0x05	; 5
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	89 27       	eor	r24, r25
 2aa:	85 b9       	out	0x05, r24	; 5
}
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
