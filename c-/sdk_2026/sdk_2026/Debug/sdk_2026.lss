
sdk_2026.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000958  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bf  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000483  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017f  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 92 00 	call	0x124	; 0x124 <main>
  78:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
 */ 
#include <avr/interrupt.h>
#include "leds.h"

ISR(INT0_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	3f 93       	push	r19
  8e:	4f 93       	push	r20
  90:	5f 93       	push	r21
  92:	6f 93       	push	r22
  94:	7f 93       	push	r23
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  9a:	af 93       	push	r26
  9c:	bf 93       	push	r27
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
		led_on_off_fast();
  a2:	0e 94 7c 00 	call	0xf8	; 0xf8 <led_on_off_fast>
}
  a6:	ff 91       	pop	r31
  a8:	ef 91       	pop	r30
  aa:	bf 91       	pop	r27
  ac:	af 91       	pop	r26
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	7f 91       	pop	r23
  b4:	6f 91       	pop	r22
  b6:	5f 91       	pop	r21
  b8:	4f 91       	pop	r20
  ba:	3f 91       	pop	r19
  bc:	2f 91       	pop	r18
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <init_int0>:

void init_int0(void)
{
	EICRA |= (1 << ISC00); //interruption on any logical change
  c8:	e9 e6       	ldi	r30, 0x69	; 105
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
  d2:	8d b3       	in	r24, 0x1d	; 29
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8d bb       	out	0x1d, r24	; 29
	sei();
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <led_on_off>:
#include <avr/io.h>
#include <util/delay.h>

void led_on_off()
{
	PORTB ^= 1 << PB5;
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	89 27       	eor	r24, r25
  e2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <led_on_off+0xe>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <led_on_off+0x18>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <led_on_off_fast>:
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	0f c0       	rjmp	.+30     	; 0x11c <led_on_off_fast+0x24>
	{
		PORTB ^= 1 << PB5;
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	89 27       	eor	r24, r25
 104:	85 b9       	out	0x05, r24	; 5
 106:	4f ef       	ldi	r20, 0xFF	; 255
 108:	81 ee       	ldi	r24, 0xE1	; 225
 10a:	94 e0       	ldi	r25, 0x04	; 4
 10c:	41 50       	subi	r20, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <led_on_off_fast+0x14>
 114:	00 c0       	rjmp	.+0      	; 0x116 <led_on_off_fast+0x1e>
 116:	00 00       	nop
	PORTB ^= 1 << PB5;
	_delay_ms(500);
}
void led_on_off_fast()
{
	for(int x = 0; x < 20; x++)
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	24 31       	cpi	r18, 0x14	; 20
 11e:	31 05       	cpc	r19, r1
 120:	74 f3       	brlt	.-36     	; 0xfe <led_on_off_fast+0x6>
	{
		PORTB ^= 1 << PB5;
		_delay_ms(100);	
	}
	
 122:	08 95       	ret

00000124 <main>:
#include "ext_int.h"

int main(void)
{
    /* Replace with your application code */
    init_ports();
 124:	0e 94 99 00 	call	0x132	; 0x132 <init_ports>
	init_int0();
 128:	0e 94 64 00 	call	0xc8	; 0xc8 <init_int0>
	while (1) 
    {
	 led_on_off();
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <led_on_off>
 130:	fd cf       	rjmp	.-6      	; 0x12c <main+0x8>

00000132 <init_ports>:
 */
#include <avr/io.h>
void init_ports(void)
{
	//configura PB5 como salida
	DDRB |= 1 << PB5;
 132:	84 b1       	in	r24, 0x04	; 4
 134:	80 62       	ori	r24, 0x20	; 32
 136:	84 b9       	out	0x04, r24	; 4
	//configura PD2 como entrada
	DDRD &= ~(1 << PD2);
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	84 60       	ori	r24, 0x04	; 4
 142:	8b b9       	out	0x0b, r24	; 11
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
